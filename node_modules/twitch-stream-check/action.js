const chalk = require('chalk'),
    request = require('superagent'),
    timeago = require('timeago-words');

// Initialize global variables for streamer/program
let _streamer, _program;

// Converts the first character of a string to uppercase
function firstUp(string) {
    return string.substr(0,1).toUpperCase() + string.substr(1);
}

// Output a message with a specified style to the console
function output(style, ...value) {
    const styled = value.shift();
    return console.log(chalk[style](styled), ...value);
}


var d = new Date();
d = new Date(d.getTime() - 3000000);
var date_format_str = d.getFullYear().toString()+((d.getMonth()+1).toString().length==2?(d.getMonth()+1).toString():"0"+(d.getMonth()+1).toString())+(d.getDate().toString().length==2?d.getDate().toString():"0"+d.getDate().toString());




// Handle request failure
function failure(error) {
    output('red', 'An error occured!', error);
    return process.exit(1);
}

// Handle streamers not streaming
function notStreaming(streamer) {
    output('red', '');
    return process.exit(1);
}

// Return a string specifying whether the streamer is mature or not
function matureStatus(mature) {
    return ` ${ mature ? '' : '' } `;
}

// Return a string specifying whether the streamer is partnered or not
function partneredStatus(partnered) {
    return `This streamer ${ partnered ? 'is' : 'is not' } partnered`;
}

// Handle request success
function success(response) {
    // Attempt to get stream information from the response
    const streamer = firstUp(_streamer),
        stream     = JSON.parse(response.text).stream;
    // If there's no stream, let the user know the streamer is not streaming
    if (!stream) return notStreaming(streamer);
    // Let the user know the streamer is streaming
    output('green', '' );
    // Get all possible flags from the program...
    const {
        game, viewers, started,
        mature, title, partnered, followers
    } = _program;
    // ... and output messages on those that are set
    if (followers) output('green', '<programme start="' + '20211002000000 +0000" stop="' + '20211030235959 +0000" channel="'+ streamer + '.us">');
    if (title)     output('green', '<title lang="en">',      stream.channel.status + ' </title>');
    if (game)      output('green', '<desc lang="en">',       stream.game + ' viewers: '+ stream.viewers+ ' </desc>');
    if (viewers)   output('green', '</programme>');
    if (started)   output('green', '<channel id="'+ streamer + '.us">' );
    if (mature)    output('green', '<display-name>'+ streamer + '</display-name>' );
    if (partnered) output('green', '</channel>');
    
}

// Handle the request response
function response(error, response) {
    return error ? failure(error) : success(response);
}

// Get/output the streamer's details
module.exports = (streamer, program) => {
    // Make the streamer/program globally accessible
    _streamer = streamer;
    _program  = program;

    // Store the header to use for all requests
    const header = {
        'Client-ID': '3zzmx0l2ph50anf78iefr6su9d8byj8',
        'Accept':    'application/vnd.twitchtv.v5+json'
    };

    // Store the URL to request users...
    const usersURL = 'https://api.twitch.tv/kraken/users?login=' + streamer
    // ... and make the request
    request.get(usersURL).set(header).end((err, res) => {
        // If an error occured, log a failure
        if (err) return failure(err);

        // Next, get the users array from the response body...
        const { users } = res.body;
        // ... and if there's more than one user, log a failure
        if (users.length > 1) return failure('There are more than one user by the name "' + streamer + '"');

        // Next, get the user's ID...
        const { _id: id } = users[0],
            // ... store the URL to request a stream,...
            streamsURL = 'https://api.twitch.tv/kraken/streams/' + id;
        // ... and make the final request
        request.get(streamsURL).set(header).end(response);
    });
};
